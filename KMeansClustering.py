# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16oprCivNXulHSOxIdi_WJiZXNiPettBb
"""

# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18FseIXSUCbtwEqR47Oohjk8DwqrDFx5m
"""

# importing libraries
import numpy as np
import random 
import matplotlib.pyplot as plt

# initializing a and b with gaussian distribution
a = np.random.normal(5,1.5, (1000,2))
b = np.random.normal(10,1.5, (1000,2))

# 2000 x 2 array
z = np.concatenate((a,b))

def distance_calculator(arr2d, c1, c2):

  # distances calculated by subtracting the array entry with center c1 and center c2
  dist1 = np.linalg.norm(arr2d-c1, axis=1) 
  dist2 = np.linalg.norm(arr2d-c2, axis=1)
  
  # assigning clusters according to their eucledian distance
  cluster1 = arr2d[dist1>= dist2]
  cluster2 = arr2d[dist1< dist2]

  return cluster1.mean(axis=0), cluster2.mean(axis=0), cluster1, cluster2


#random points in z for first iteration
centre1 = z[np.random.randint(0,len(z))]
centre2 = z[np.random.randint(0,len(z))]

plt.figure(0)
plt.title("Before Clustering")

# assign z values the color red
plt.scatter(z[:,0], z[:,1], color='red')

# assigning cluster centers as blue 
plt.scatter(centre1[0], centre1[1] , color='blue')
plt.scatter(centre2[0], centre2[1] , color='blue')
plt.figure()
# Clustering after 1 iteration and setting c1m and c2m as cluster centers for next iterations
c1m, c2m, c1, c2 = distance_calculator(z,centre1,centre2)
print(c1m)

plt.scatter(c1[:,0], c1[:,1], color='red', s=3, label = 'Cluster 1')
plt.scatter(c2[:,0], c2[:,1], color='yellow', s=3, label = 'Cluster 2')

plt.scatter(c1m[0], c1m[1] , color='blue', label = "Cluster Center")
plt.scatter(c2m[0], c2m[1] , color='blue')
plt.figure()
plt.legend()
plt.title("After 1 iteration")

for i in range(100):
  c1m, c2m, c1, c2 = distance_calculator(z,c1m,c2m)

plt.scatter(c1[:,0], c1[:,1], color='red', s=3, label = 'Cluster 1')
plt.scatter(c2[:,0], c2[:,1], color='yellow', s=3, label = 'Cluster 2')
plt.scatter(c1m[0], c1m[1] , color='blue', label = 'Cluster Center')
plt.scatter(c2m[0], c2m[1] , color='blue')

plt.title("After Clustering")
plt.legend()
plt.figure()